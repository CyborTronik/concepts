<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://concepts.3fun.space/concepts/concepts/feed.xml" rel="self" type="application/atom+xml" /><link href="https://concepts.3fun.space/concepts/concepts/" rel="alternate" type="text/html" /><updated>2023-03-26T11:18:13+00:00</updated><id>https://concepts.3fun.space/concepts/concepts/feed.xml</id><title type="html">Re-structured Software Architecture</title><subtitle>This blog is about re-aligning on existing software architecture concepts in a simplifie way. Also as a guide, that helps to search the tool or approach for the task in question.</subtitle><entry><title type="html">Re-structured Communication Types</title><link href="https://concepts.3fun.space/concepts/concepts/communications/events/async/2023/03/25/communication_types.html" rel="alternate" type="text/html" title="Re-structured Communication Types" /><published>2023-03-25T23:59:00+00:00</published><updated>2023-03-25T23:59:00+00:00</updated><id>https://concepts.3fun.space/concepts/concepts/communications/events/async/2023/03/25/communication_types</id><content type="html" xml:base="https://concepts.3fun.space/concepts/concepts/communications/events/async/2023/03/25/communication_types.html">&lt;p&gt;An imense amount of books and sources have missalignments in the way of mixing the &lt;a href=&quot;/categories/domain/2023/03/19/architecture_type_by_domain.html&quot;&gt;software architecture types&lt;/a&gt; with the way communication and have it in one backet as “Categories of Architecture”.&lt;/p&gt;

&lt;p&gt;To avoid that confusion in addition to the &lt;a href=&quot;/categories/domain/2023/03/19/architecture_type_by_domain.html&quot;&gt;re-structured software architecture types&lt;/a&gt; below is the concise suggestion of the ways of interaction between system or software artifacts.&lt;/p&gt;

&lt;p&gt;Kind of software interactions:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Alias/Reference&lt;/th&gt;
      &lt;th&gt;Attributes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Blocking request&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;syncronious communication&lt;/td&gt;
      &lt;td&gt;Blocked process untill gets the result.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Async request&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;asyncronious communication&lt;/td&gt;
      &lt;td&gt;Blocking request that gets a reference ID, and multiple requests that check the result based on reference ID.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Notify request&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;event based communication, also fire and forget &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td&gt;One way communication. Kind of request that doesn’t wait for response.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Subscriber&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;event based communication&lt;/td&gt;
      &lt;td&gt;Actually only receiving &lt;strong&gt;responses&lt;/strong&gt; not requesting them. Low load, eventual consistency.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Realtime processing&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;streaming&lt;/td&gt;
      &lt;td&gt;Pulling (almost listening) data and receiving results as soon as they are ready to be processed.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Bulk processing&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;batch jobs&lt;/td&gt;
      &lt;td&gt;One time processing of big amount of data. Resource hungry. Eventual consistency.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Fire and forget concept usually goes togheter with the &lt;a href=&quot;https://doc.akka.io/docs/akka/current/typed/interaction-patterns.html#fire-and-forget&quot;&gt;Actor based systems&lt;/a&gt;, an evolution of the concept from &lt;a href=&quot;https://www.erlang.org/&quot;&gt;Erlang lang&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="communications" /><category term="events" /><category term="async" /><summary type="html">An imense amount of books and sources have missalignments in the way of mixing the software architecture types with the way communication and have it in one backet as “Categories of Architecture”.</summary></entry><entry><title type="html">Re-structured Architecture Types By Domain</title><link href="https://concepts.3fun.space/concepts/concepts/categories/domain/2023/03/19/architecture_type_by_domain.html" rel="alternate" type="text/html" title="Re-structured Architecture Types By Domain" /><published>2023-03-19T20:26:08+00:00</published><updated>2023-03-19T20:26:08+00:00</updated><id>https://concepts.3fun.space/concepts/concepts/categories/domain/2023/03/19/architecture_type_by_domain</id><content type="html" xml:base="https://concepts.3fun.space/concepts/concepts/categories/domain/2023/03/19/architecture_type_by_domain.html">&lt;p&gt;A common expectactation for the software in business terms is to be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solution&lt;/code&gt; of certain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;situation&lt;/code&gt;.
And it makes a natural fit for the software design to be shaped around the bussiness domain and meaning. In otherway define type of architecture where the pivot (north-star) is the business domain.&lt;/p&gt;

&lt;p&gt;In this regard the suggestion is to look at commonly used terms in the following way:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Solution Scope&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Full business scope + End to end solution&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Monolithic Architecture&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Full business scope + One layer&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Layered Architecture&lt;/em&gt; &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bounded domain + End to end solution&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Service Oriented Architecture (SOA)&lt;/em&gt; &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bounded domain + One layer&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Micro application&lt;/em&gt; &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For layered architecture a popular case is Client-Server one. Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client&lt;/code&gt; is considered as one layer that knows everything in the business scope. And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; as another layer that knows the whole business context too. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;SOA at times might be considered monolithic architecture when the context is either not bounded or too big to handle. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;More comonly is &lt;em&gt;microservice&lt;/em&gt; which is about backend side, while on the front end you may see the term &lt;em&gt;micro frontend&lt;/em&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="categories" /><category term="domain" /><summary type="html">A common expectactation for the software in business terms is to be a solution of certain situation. And it makes a natural fit for the software design to be shaped around the bussiness domain and meaning. In otherway define type of architecture where the pivot (north-star) is the business domain.</summary></entry></feed>