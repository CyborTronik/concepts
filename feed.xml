<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://concepts.3fun.space/concepts/feed.xml" rel="self" type="application/atom+xml" /><link href="https://concepts.3fun.space/concepts/" rel="alternate" type="text/html" /><updated>2023-03-21T23:37:55+00:00</updated><id>https://concepts.3fun.space/concepts/feed.xml</id><title type="html">Regular Software Architecture</title><subtitle>The site has the intention to help navigating through software architecture concepts in a simplified manner.  Also as a guide, that helps to search the tool or approach for the task in question.</subtitle><entry><title type="html">Simplified Architecture Types By Domain</title><link href="https://concepts.3fun.space/concepts/categories/domain/2023/03/19/architecture_type_by_domain.html" rel="alternate" type="text/html" title="Simplified Architecture Types By Domain" /><published>2023-03-19T20:26:08+00:00</published><updated>2023-03-19T20:26:08+00:00</updated><id>https://concepts.3fun.space/concepts/categories/domain/2023/03/19/architecture_type_by_domain</id><content type="html" xml:base="https://concepts.3fun.space/concepts/categories/domain/2023/03/19/architecture_type_by_domain.html">&lt;p&gt;A common expectactation for the software in business terms is to be a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;solution&lt;/code&gt; of certain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;situation&lt;/code&gt;. 
And it makes a natural fit for the software design to be shaped around the bussiness domain and meaning.&lt;/p&gt;

&lt;p&gt;In this regard the suggestion is to look at commonly used terms in the following way:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Solution Scope&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Full business scope + End to end solution&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Monolithic Architecture&lt;/em&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Full business scope + One layer&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Client-Server Architecture&lt;/em&gt; &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bounded domain + End to end solution&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Service Oriented Architecture (SOA)&lt;/em&gt; &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Bounded domain + One layer&lt;/td&gt;
      &lt;td&gt;&lt;em&gt;Micro application&lt;/em&gt; &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Client&lt;/code&gt; considered as one layer that knows everything in the business scope. And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server&lt;/code&gt; as another layer that knows the whole business context too. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;SOA at times might be considered monolithic architecture when the context is either not bounded or too big to handle. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;More comonly is &lt;em&gt;microservice&lt;/em&gt; which is about backend side, while on the front end you may see the term &lt;em&gt;micro frontend&lt;/em&gt;. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="categories" /><category term="domain" /><summary type="html">A common expectactation for the software in business terms is to be a solution of certain situation. And it makes a natural fit for the software design to be shaped around the bussiness domain and meaning.</summary></entry></feed>